{"ast":null,"code":"import { connectToDatabase } from '../../utils/mongodb';\n\nconst cities = require('../../utils/seed_data/cities');\n\nconst {\n  places,\n  descriptors\n} = require('../../utils/seed_data/seedHelpers');\n\nexport default (async (req, res) => {\n  const {\n    db\n  } = await connectToDatabase();\n\n  const sample = array => array[Math.floor(Math.random() * array.length)];\n\n  try {\n    for (let i = 0; i < 50; i++) {\n      const random1000 = Math.floor(Math.random() * 1000);\n      const camp = new Campground({\n        location: `${cities[random1000].city}, ${cities[random1000].state}`,\n        title: `${sample(descriptors)} ${sample(places)}`\n      });\n      const campgrounds = await db.collection('campgrounds').insert(camp);\n      res.send(campgrounds);\n    }\n  } catch (error) {\n    res.status(400).json({\n      success: false\n    });\n  }\n});","map":{"version":3,"sources":["/Users/joemccann/Desktop/yelpcamp-nexjs/pages/api/seed.js"],"names":["connectToDatabase","cities","require","places","descriptors","req","res","db","sample","array","Math","floor","random","length","i","random1000","camp","Campground","location","city","state","title","campgrounds","collection","insert","send","error","status","json","success"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,qBAAlC;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,8BAAD,CAAtB;;AACA,MAAM;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,IAA0BF,OAAO,CAAC,mCAAD,CAAvC;;AAEA,gBAAe,OAAOG,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAM;AAAEC,IAAAA;AAAF,MAAS,MAAMP,iBAAiB,EAAtC;;AAEA,QAAMQ,MAAM,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,KAAK,CAACI,MAAjC,CAAD,CAA/B;;AAEA,MAAI;AACH,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC5B,YAAMC,UAAU,GAAGL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,IAA3B,CAAnB;AACA,YAAMI,IAAI,GAAG,IAAIC,UAAJ,CAAe;AAC3BC,QAAAA,QAAQ,EAAG,GAAEjB,MAAM,CAACc,UAAD,CAAN,CAAmBI,IAAK,KAAIlB,MAAM,CAACc,UAAD,CAAN,CAAmBK,KAAM,EADvC;AAE3BC,QAAAA,KAAK,EAAG,GAAEb,MAAM,CAACJ,WAAD,CAAc,IAAGI,MAAM,CAACL,MAAD,CAAS;AAFrB,OAAf,CAAb;AAIA,YAAMmB,WAAW,GAAG,MAAMf,EAAE,CAACgB,UAAH,CAAc,aAAd,EAA6BC,MAA7B,CAAoCR,IAApC,CAA1B;AACAV,MAAAA,GAAG,CAACmB,IAAJ,CAASH,WAAT;AACA;AACD,GAVD,CAUE,OAAOI,KAAP,EAAc;AACfpB,IAAAA,GAAG,CAACqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACA;AACD,CAlBD","sourcesContent":["import { connectToDatabase } from '../../utils/mongodb';\nconst cities = require('../../utils/seed_data/cities');\nconst { places, descriptors } = require('../../utils/seed_data/seedHelpers');\n\nexport default async (req, res) => {\n\tconst { db } = await connectToDatabase();\n\n\tconst sample = (array) => array[Math.floor(Math.random() * array.length)];\n\n\ttry {\n\t\tfor (let i = 0; i < 50; i++) {\n\t\t\tconst random1000 = Math.floor(Math.random() * 1000);\n\t\t\tconst camp = new Campground({\n\t\t\t\tlocation: `${cities[random1000].city}, ${cities[random1000].state}`,\n\t\t\t\ttitle: `${sample(descriptors)} ${sample(places)}`,\n\t\t\t});\n\t\t\tconst campgrounds = await db.collection('campgrounds').insert(camp);\n\t\t\tres.send(campgrounds);\n\t\t}\n\t} catch (error) {\n\t\tres.status(400).json({ success: false });\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}