{"ast":null,"code":"import { connectToDatabase } from \"../../utils/mongodb\";\nexport default (async (req, res) => {\n  const {\n    method\n  } = req;\n  const {\n    db\n  } = await connectToDatabase();\n\n  switch (method) {\n    case 'GET':\n      try {\n        const campgrounds = await db.collection(\"campgrounds\").find({}).sort({\n          metacritic: -1\n        }).limit(20).toArray();\n        res.json(campgrounds);\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case 'POST':\n      try {\n        // const campgrounds = await db\n        // .collection(\"campgrounds\")\n        // .find({})\n        // .sort({ metacritic: -1 })\n        // .limit(20)\n        // .toArray();\n        res.json(campgrounds);\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n  }\n});\n/*\n\n  switch (method) {\n    case 'GET':\n      try {\n        const pets = await Pet.find({}) \n        res.status(200).json({ success: true, data: pets })\n      } catch (error) {\n        res.status(400).json({ success: false })\n      }\n      break\n    case 'POST':\n      try {\n        const pet = await Pet.create(\n          req.body\n        )\n        res.status(201).json({ success: true, data: pet })\n      } catch (error) {\n        res.status(400).json({ success: false })\n      }\n      break\n    default:\n      res.status(400).json({ success: false })\n      break\n  }\n}\n*/","map":{"version":3,"sources":["/Users/joemccann/Desktop/yelpcamp-nexjs/pages/api/campgrounds.js"],"names":["connectToDatabase","req","res","method","db","campgrounds","collection","find","sort","metacritic","limit","toArray","json","error","status","success"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,qBAAlC;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAEjC,QAAM;AAAEC,IAAAA;AAAF,MAAaF,GAAnB;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAS,MAAMJ,iBAAiB,EAAtC;;AAEA,UAAQG,MAAR;AACE,SAAK,KAAL;AACE,UAAI;AACF,cAAME,WAAW,GAAG,MAAMD,EAAE,CAC3BE,UADyB,CACd,aADc,EAEzBC,IAFyB,CAEpB,EAFoB,EAGzBC,IAHyB,CAGpB;AAAEC,UAAAA,UAAU,EAAE,CAAC;AAAf,SAHoB,EAIzBC,KAJyB,CAInB,EAJmB,EAKzBC,OALyB,EAA1B;AAOFT,QAAAA,GAAG,CAACU,IAAJ,CAASP,WAAT;AACC,OATD,CASE,OAAOQ,KAAP,EAAc;AACdX,QAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAAEG,UAAAA,OAAO,EAAE;AAAX,SAArB;AACD;;AACD;;AACA,SAAK,MAAL;AACE,UAAI;AACF;AACA;AACA;AACA;AACA;AACA;AAEFb,QAAAA,GAAG,CAACU,IAAJ,CAASP,WAAT;AACC,OATD,CASE,OAAOQ,KAAP,EAAc;AACdX,QAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAAEG,UAAAA,OAAO,EAAE;AAAX,SAArB;AACD;;AA3BP;AA6BD,CAlCD;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { connectToDatabase } from \"../../utils/mongodb\";\n\nexport default async (req, res) => {\n\n  const { method } = req\n  const { db } = await connectToDatabase();\n  \n  switch (method){\n    case 'GET':\n      try {\n        const campgrounds = await db\n        .collection(\"campgrounds\")\n        .find({})\n        .sort({ metacritic: -1 })\n        .limit(20)\n        .toArray();\n    \n      res.json(campgrounds);\n      } catch (error) {\n        res.status(400).json({ success: false })\n      }\n      break\n      case 'POST':\n        try {\n          // const campgrounds = await db\n          // .collection(\"campgrounds\")\n          // .find({})\n          // .sort({ metacritic: -1 })\n          // .limit(20)\n          // .toArray();\n      \n        res.json(campgrounds);\n        } catch (error) {\n          res.status(400).json({ success: false })\n        }\n  }\n};\n\n/*\n\n  switch (method) {\n    case 'GET':\n      try {\n        const pets = await Pet.find({}) \n        res.status(200).json({ success: true, data: pets })\n      } catch (error) {\n        res.status(400).json({ success: false })\n      }\n      break\n    case 'POST':\n      try {\n        const pet = await Pet.create(\n          req.body\n        )\n        res.status(201).json({ success: true, data: pet })\n      } catch (error) {\n        res.status(400).json({ success: false })\n      }\n      break\n    default:\n      res.status(400).json({ success: false })\n      break\n  }\n}\n*/"]},"metadata":{},"sourceType":"module"}